using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Microsoft.Kinect;

namespace Tracking_Hand
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        int ch = 0;
        KinectSensor sensor;
        Skeleton[] totalSkeleton = new Skeleton[6];
        private void WindowLoaded(object sender, RoutedEventArgs e)
        {
            this.sensor = KinectSensor.KinectSensors[0];
            this.sensor.SkeletonStream.TrackingMode = SkeletonTrackingMode.Seated;
            this.sensor.SkeletonStream.Enable();
            this.sensor.SkeletonFrameReady += skeletonFrameReady;
            // start the sensor.
            this.sensor.Start();
            // create the smooth parameters
            var smoothParameters = new TransformSmoothParameters
            {
                Correction = 0.1f,
                JitterRadius = 0.05f,
                MaxDeviationRadius = 0.05f,
                Prediction = 0.1f,
                Smoothing = 0.5f
            };
            // Enable the skeleton stream with smooth parameters
            this.sensor.SkeletonStream.Enable(smoothParameters);

        }
        private void WindowClosing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (this.sensor != null && this.sensor.IsRunning)
            {
                this.sensor.Stop();
            }
        }
        void skeletonFrameReady(object sender, SkeletonFrameReadyEventArgs e)
        {
            using (SkeletonFrame skeletonFrame = e.OpenSkeletonFrame())
            {
                if (skeletonFrame == null)
                {
                    return;
                }
                skeletonFrame.CopySkeletonDataTo(totalSkeleton);
                Skeleton firstSkeleton = (from trackskeleton in totalSkeleton
                                          where trackskeleton.TrackingState == SkeletonTrackingState.Tracked
                                          select trackskeleton).FirstOrDefault();
                if (firstSkeleton == null)
                {
                    return;
                }
                if (firstSkeleton.Joints[JointType.HandRight].TrackingState ==
                   JointTrackingState.Tracked)
                {
                    this.MapJointsWithUIElement(firstSkeleton);
                }
            }
        }
        public void MapJointsWithUIElement(Skeleton skeleton)
        {
            Point mappedPoint = ScalePosition(skeleton.Joints[JointType.HandRight].Position);
            Line h = new Line();

            h.X1 = mappedPoint.X - 2;
            h.Y1 = mappedPoint.Y - 2;

            h.X2 = mappedPoint.X + 2;
            h.Y2 = mappedPoint.Y + 2;

            h.X3 = mappedPoint.X - 2;
            h.Y3 = mappedPoint.Y - 2;

            h.X4 = mappedPoint.X + 2;
            h.Y4 = mappedPoint.Y + 2;

            h.X5 = mappedPoint.X - 2;
            h.Y5 = mappedPoint.Y - 2;





            if (ch == 1)
            {
                h.Stroke = Brushes.Red;
            }
            else if (ch == 2)
            {
                h.Stroke = Brushes.Green;
            }
            else if (ch == 3)
            {
                h.stroke = Brushes.Yellow;
            }
            else if (ch == 4)
            {
                h.stroke = Brushes.Pink;
            }
            else if (ch == 5)
            {
                h.stroke = Brushes.purple;
            }
            else
            {
                h.Stroke = Brushes.Black;

            }

            h.StrokeThickness = 10;
            p.Children.Add(h);
        }


        public void Red(object sender, RoutedEventArgs e)
        {
            ch = 1;
        }
        private Point ScalePosition(SkeletonPoint skeletonPoint)
        {
            DepthImagePoint depthPoint = this.sensor.CoordinateMapper.
                      MapSkeletonPointToDepthPoint(skeletonPoint, DepthImageFormat.
                                 Resolution640x480Fps30);
            return new Point(depthPoint.X, depthPoint.Y);
        }

        private void Erase(object sender, RoutedEventArgs e)
        {
            p.Children.Clear();
        }

        private void Green(object sender, RoutedEventArgs e)
        {
            ch = 2;
        }
    }   
    }