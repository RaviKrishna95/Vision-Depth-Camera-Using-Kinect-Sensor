using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Emgu.CV;
using Microsoft.Kinect;
using System.Windows;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Runtime.InteropServices;
using System.IO;
using System.Drawing;
using Emgu.CV.Structure;


namespace KinectDepthImages
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        KinectSensor sensor;
        WriteableBitmap depthBitmap;
        WriteableBitmap colorBitmap;
        DepthImagePixel[] depthPixels;
        byte[] colorPixels;
        public MainWindow()
        {
            InitializeComponent();
            this.Loaded += WindowLoaded;
        }

        private void WindowLoaded(object sender, RoutedEventArgs e)
        {
            foreach (var potentialSensor in KinectSensor.KinectSensors)
            {
                if (potentialSensor.Status == KinectStatus.Connected)
                {
                    this.sensor = potentialSensor;
                    break;
                }
            }
            if (null != this.sensor)
            {
                this.sensor.DepthStream.Enable(DepthImageFormat.Resolution640x480Fps30);
                this.sensor.ColorStream.Enable(ColorImageFormat.RgbResolution640x480Fps30);
                this.colorPixels = new byte[this.sensor.ColorStream.FramePixelDataLength];
                this.depthPixels = new DepthImagePixel[this.sensor.DepthStream.FramePixelDataLength];
                this.colorBitmap = new WriteableBitmap(this.sensor.ColorStream.FrameWidth, this.sensor.ColorStream.FrameHeight, 96.0, 96.0, PixelFormats.Bgr32, null);
                this.depthBitmap = new WriteableBitmap(this.sensor.DepthStream.FrameWidth, this.sensor.DepthStream.FrameHeight, 96.0, 96.0, PixelFormats.Bgr32, null);
                this.colorImg.Source = this.colorBitmap; // name of the image control
                this.outImg.Source = this.depthBitmap; // name of the image control
                this.sensor.AllFramesReady += this.allFramesReady;
                try
                {
                    this.sensor.Start();
                }
                catch (IOException) { this.sensor = null; }
            }
        }
        private void allFramesReady(object sender, AllFramesReadyEventArgs e)
        {
            BitmapSource depthBmp = null;
            using (ColorImageFrame colorFrame = e.OpenColorImageFrame())
            {
                if (colorFrame != null)
                {
                    colorFrame.CopyPixelDataTo(this.colorPixels);
                    int stride = colorFrame.Width * colorFrame.BytesPerPixel;
                    this.colorBitmap.WritePixels(
                      new Int32Rect(0, 0, this.colorBitmap.PixelWidth, this.colorBitmap.PixelHeight),
                      this.colorPixels, stride, 0);
                }
                using (DepthImageFrame depthFrame = e.OpenDepthImageFrame())
                {
                    if (depthFrame != null)
                    {
                        depthBmp = depthFrame.SliceDepthImage();
                        if (depthBmp == null)
                            return;
                        Bitmap tmp = depthBmp.ToBitmap();
                        Image<Bgr, Byte> openCVImg = new Image<Bgr, byte>(tmp);
                        Image<Gray, Byte> gray = openCVImg.Convert<Gray, Byte>().PyrDown().PyrUp();

                        Gray cannyThreshold = new Gray(180);
                        Gray cannyThresholdLinking = new Gray(120);
                        Image<Gray, Byte> cannyEdges = gray.Canny(cannyThreshold, cannyThresholdLinking);
                        this.outImg.Source = ImageHelper.ToBitmapSource(cannyEdges);
                    }
                } // using
            } // if(depthFrame!=null)
        } // using

        private void WindowClosing(object sender, System.ComponentModel.CancelEventArgs e)
        {

        }
    }
}