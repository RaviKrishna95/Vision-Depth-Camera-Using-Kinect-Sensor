using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Microsoft.Kinect;
using System.Windows.Threading;
using System.IO;
namespace KinectCam3
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            if (KinectSensor.KinectSensors.Count > 0)
            {
                this.sensor = KinectSensor.KinectSensors[0];
                if (this.sensor != null && !this.sensor.IsRunning)
                {
                    this.sensor.ColorStream.Enable();
                    this.colorPixels = new byte[this.sensor.ColorStream.FramePixelDataLength];
                    this.colorBitmap = new WriteableBitmap(this.sensor.ColorStream.FrameWidth, this.sensor.ColorStream.FrameHeight, 96.0, 96.0, PixelFormats.Bgr32, null);
                    this.image.Source = this.colorBitmap;

                    this.sensor.ColorFrameReady += this.colorFrameReady;
                    this.sensor.Start();
                }
                else {
                    MessageBox.Show("No device is connected!");
                    this.Close();
                }

            }
        }
        KinectSensor sensor;
        private WriteableBitmap colorBitmap;
        private byte[] colorPixels;
        private void checkBox_Checked(object sender, RoutedEventArgs e)
        {
            if (this.sensor != null)
            {
                this.checkBox1.IsChecked = false;
                this.checkBox.IsChecked = true;
                this.sensor.ColorStream.Enable(
             ColorImageFormat.RgbResolution640x480Fps30);
                this.colorPixels = new byte[this.sensor.ColorStream.FramePixelDataLength];
            }
        }
        private void checkBox1_Checked(object sender, RoutedEventArgs e)
        {
            if (this.sensor != null)
            {
                this.checkBox.IsChecked = false;
                this.checkBox1.IsChecked = true;
                this.sensor.ColorStream.Enable
                    (
              ColorImageFormat.RgbResolution1280x960Fps12);
                this.colorPixels = new byte[this.sensor.ColorStream.FramePixelDataLength];
            }
        }
        void colorFrameReady(object sender, ColorImageFrameReadyEventArgs e)
        {
            using (ColorImageFrame imageFrame = e.OpenColorImageFrame())
            {
                if (null == imageFrame)
                    return;

                imageFrame.CopyPixelDataTo(colorPixels);
                int stride = imageFrame.Width * imageFrame.BytesPerPixel;

                // Write the pixel data into our bitmap
                this.colorBitmap.WritePixels(
                    new Int32Rect(0, 0, this.colorBitmap.PixelWidth, this.colorBitmap.PixelHeight),
                        this.colorPixels, stride, 0);
                textBox.Text = "" + GetCurrentFrameRate();
            }
        }
        private int TotalFrames;
        private DateTime lastTime = DateTime.MaxValue;
        private int LastFrames;
        int currentFrameRate = 0;
        private int GetCurrentFrameRate()
        {
            ++this.TotalFrames;
            DateTime currentTime = DateTime.Now;
            var timeSpan = currentTime.Subtract(this.lastTime);
            if (this.lastTime == DateTime.MaxValue || timeSpan >= TimeSpan.FromSeconds(1)) // average 1 second
            {
                currentFrameRate = (int)Math.Round((this.TotalFrames - this.
                LastFrames) / timeSpan.TotalSeconds);
                this.LastFrames = this.TotalFrames;
                this.lastTime = currentTime;
            }
            return currentFrameRate;

        }
        private void SetSensorAngle(int angleValue)
        {
            if (angleValue > sensor.MinElevationAngle || angleValue < sensor.MaxElevationAngle)
            {
                this.sensor.ElevationAngle = angleValue;
            }
        }


        private void button_Click(object sender, RoutedEventArgs e)
        {
            int angleValue = this.sensor.ElevationAngle + 1;
            if (angleValue < sensor.MaxElevationAngle)
            {
                this.sensor.ElevationAngle = angleValue;
                this.textBox1.Text = "" + angleValue;
            }
        }

        private void button1_Click(object sender, RoutedEventArgs e)
        {
            {
                int angleValue = this.sensor.ElevationAngle - 1;
                if (angleValue > sensor.MinElevationAngle)
                {
                    this.sensor.ElevationAngle = angleValue;
                    this.textBox1.Text = "" + angleValue;
                }
            }

        }


        public ColorImageFormat ImageFormat { get; set; }
       


        private void SaveImage()
        {
            using (FileStream fileStream = new FileStream(string.Format("C:/Users/Ravi Krishna/Desktop/1.jpg", Guid.NewGuid().ToString()), System.IO.FileMode.Create))
            {
                BitmapSource imageSource = (BitmapSource)image.Source;
                JpegBitmapEncoder jpegEncoder = new JpegBitmapEncoder();
                jpegEncoder.Frames.Add(BitmapFrame.Create(imageSource));
                jpegEncoder.Save(fileStream);
                fileStream.Close();
            }
        }

        private void button2_Click(object sender, RoutedEventArgs e)
        {
            SaveImage();
        }
        private void checkBox2_Checked(object sender, RoutedEventArgs e)
        {
            if (checkBox1.IsChecked == true)
            {
                StartTimer();
            }
            else { this.timer.Stop(); }

        }
        private DispatcherTimer timer = new DispatcherTimer();
        public void handleTickEvent(object sender, object e)
        {
            if (this.sensor.IsRunning && this.sensor.ColorStream.IsEnabled)
            {
                this.SaveImage();
            }
        }


        public void StartTimer()
        {
            this.timer.Interval = new TimeSpan(0, 0, 10);
            this.timer.Start();
            this.timer.Tick += handleTickEvent;
        }
        public void StopTimer()
        {
            this.timer.Stop();
            this.timer.Tick -= this.handleTickEvent;
        }

       
    }
}